<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_161) on Tue Apr 24 19:57:09 EDT 2018 -->
<meta http-equiv="Content-Type" content="text/html; charset=utf8">
<title>SVector3d</title>
<meta name="date" content="2018-04-24">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="SVector3d";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":9,"i3":10,"i4":10,"i5":9,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10,"i12":10,"i13":10,"i14":10,"i15":10,"i16":10,"i17":10,"i18":9,"i19":10,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":9};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../math/MathUtil.html" title="class in math"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../index.html?math/SVector3d.html" target="_top">Frames</a></li>
<li><a href="SVector3d.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">math</div>
<h2 title="Class SVector3d" class="title">Class SVector3d</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>math.SVector3d</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<dl>
<dt>All Implemented Interfaces:</dt>
<dd>java.io.Serializable</dd>
</dl>
<hr>
<br>
<pre>public class <span class="typeNameLabel">SVector3d</span>
extends java.lang.Object
implements java.io.Serializable</pre>
<div class="block">La classe <b>SVector3d</b> représente une vecteur <i>x</i>, <i>y</i> et
 <i>z</i> à trois dimensions.
 Les opérations mathématiques supportées sont les suivantes :
 - L'addition.
 - La soustraction.
 - La multiplication par un scalaire.
 - Le produit scalaire (<i>dot product</i>).
 - Le produit vectoriel (<i>cross product</i>).
 - La normalisation (vecteur de module 1).</div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>2014-12-16</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="../serialized-form.html#math.SVector3d">Serialized Form</a></dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d--">SVector3d</a></span>()</code>
<div class="block">Constructeur représentant un vecteur 3d à l'origine d'un système d'axe xyz.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d-java.awt.Dimension-">SVector3d</a></span>(java.awt.Dimension&nbsp;dimension)</code>
<div class="block">Permet de créer un vecteur en 2 dimensions à partir d'un objet Dimension</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d-double:A-">SVector3d</a></span>(double[]&nbsp;components)</code>
<div class="block">Permet de construire un vecteur à partir d'un tableau de composantes
 Le tableau peut contenir 2 ou 3 composantes
 PAR SIMON TRAN</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d-double-double-">SVector3d</a></span>(double&nbsp;x,
         double&nbsp;y)</code>
<div class="block">Constructeur avec composante <i>x</i> et <i>y</i> vecteur 3d.</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d-double-double-double-">SVector3d</a></span>(double&nbsp;x,
         double&nbsp;y,
         double&nbsp;z)</code>
<div class="block">Constructeur avec composante <i>x</i>,<i>y</i> et <i>z</i> du vecteur 3d.</div>
</td>
</tr>
<tr class="rowColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d-java.awt.Point-">SVector3d</a></span>(java.awt.Point&nbsp;point)</code>
<div class="block">Permet de construire un vecteur avec une variable de type Point
 PAR SIMON TRAN</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../math/SVector3d.html#SVector3d-java.awt.geom.Point2D-">SVector3d</a></span>(java.awt.geom.Point2D&nbsp;point2D)</code>
<div class="block">Permet de construire un vecteur avec une variable de type Point2D
 PAR SIMON TRAN</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t1" class="tableTab"><span><a href="javascript:show(1);">Static Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#add-math.SVector3d-">add</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode qui calcule <b>l'addition</b> de deux vecteurs.</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#angle--">angle</a></span>()</code>
<div class="block">Méthode pour obtenir l'angle d'un vecteur par rapport à un vecteur horizontale dirigé vers la droite</div>
</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>static double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#angleBetween-math.SVector3d-math.SVector3d-">angleBetween</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;A,
            <a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;B)</code>
<div class="block">Méthode permettant d'obtenir l'angle entre deux vecteurs A et B.</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#changeComponentAtIndex-int-double-">changeComponentAtIndex</a></span>(int&nbsp;index,
                      double&nbsp;value)</code>
<div class="block">Permet d'obtenir un nouveau vecteur ayant la composante à l'index 'index' changée pour 'value'
 PAR SIMON TRAN</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#cross-math.SVector3d-">cross</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode pour effectuer le <b>produit vectoriel</b> avec un autre vecteur v.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>static double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#distance-math.SVector3d-math.SVector3d-">distance</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;A,
        <a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;B)</code>
<div class="block">Méthode pour obtenir la distance entre deux points.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#dot-math.SVector3d-">dot</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode pour effectuer le <b>produit scalaire</b> entre deux vecteurs.</div>
</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#equals-java.lang.Object-">equals</a></span>(java.lang.Object&nbsp;obj)</code>
<div class="block">Permet de comparer 2 vecteurs</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code>double[]</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#getComponents--">getComponents</a></span>()</code>
<div class="block">Permet d'obtenir les composantes du vecteur sous la forme d'un tableau
 PAR SIMON TRAN</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#getX--">getX</a></span>()</code>
<div class="block">Méthode qui donne accès à la coordonnée x du vecteur.</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#getY--">getY</a></span>()</code>
<div class="block">Méthode qui donne accès à la coordonnée y du vecteur.</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#getZ--">getZ</a></span>()</code>
<div class="block">Méthode qui donne accès à la coordonnée z du vecteur.</div>
</td>
</tr>
<tr id="i12" class="altColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#inverse--">inverse</a></span>()</code>
<div class="block">Permet d'obtenir un nouveau vecteur avec les composantes inversées.</div>
</td>
</tr>
<tr id="i13" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#isNormalized--">isNormalized</a></span>()</code>
<div class="block">Permet de savoir si un vecteur est normalisée</div>
</td>
</tr>
<tr id="i14" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#isNull--">isNull</a></span>()</code>
<div class="block">Permet de savoir si un vecteur est nul
 PAR SIMON TRAN</div>
</td>
</tr>
<tr id="i15" class="rowColor">
<td class="colFirst"><code>double</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#modulus--">modulus</a></span>()</code>
<div class="block">Méthode pour obtenir le <b>module</b> d'un vecteur.</div>
</td>
</tr>
<tr id="i16" class="altColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#multiply-double-">multiply</a></span>(double&nbsp;m)</code>
<div class="block">Méthode qui effectue la <b>multiplication d'un vecteur par une scalaire</b>.</div>
</td>
</tr>
<tr id="i17" class="rowColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#normalize--">normalize</a></span>()</code>
<div class="block">Méthode pour <b>normaliser</b> un vecteur à trois dimensions.</div>
</td>
</tr>
<tr id="i18" class="altColor">
<td class="colFirst"><code>static <a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#projection-math.SVector3d-math.SVector3d-">projection</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;A,
          <a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;B)</code>
<div class="block">Permet d'obtenir un vecteur représentant la projection du vecteur A sur le vecteur B
 PAR SIMON TRAN</div>
</td>
</tr>
<tr id="i19" class="rowColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#rotate-double-">rotate</a></span>(double&nbsp;angle)</code>
<div class="block">Retourne un vecteur ayant subit une rotation de 'angle' radians</div>
</td>
</tr>
<tr id="i20" class="altColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#scale-double-double-">scale</a></span>(double&nbsp;x,
     double&nbsp;y)</code>
<div class="block">Permet de redimensionner un vecteur en 2 dimensions avec 2 scalaires de grandeurs différentes
 PAR SIMON TRAN</div>
</td>
</tr>
<tr id="i21" class="rowColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#scale-math.SVector3d-">scale</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;vector)</code>
<div class="block">Permet de redimensionner un vecteur en 2 dimensions avec un autre vecteur en 2 dimensions.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code><a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#substract-math.SVector3d-">substract</a></span>(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</code>
<div class="block">Méthode qui calcul la <b>soustraction</b> de deux vecteurs.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>java.awt.geom.Point2D</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#toPoint--">toPoint</a></span>()</code>
<div class="block">Permet de convertir un SVector3d en point de 2 dimensions.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#toString--">toString</a></span>()</code>
<div class="block">Permet d'obtenir la valeur textuelle du vecteur</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>static <a href="../math/SVector3d.html" title="class in math">SVector3d</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../math/SVector3d.html#vectorFromSizeAndAngle-double-double-">vectorFromSizeAndAngle</a></span>(double&nbsp;size,
                      double&nbsp;angle)</code>
<div class="block">Permet d'obtenir un vecteur à partir d'une taille et d'un angle en radiant
 PAR SIMON TRA</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>clone, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="SVector3d--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d()</pre>
<div class="block">Constructeur représentant un vecteur 3d à l'origine d'un système d'axe xyz.</div>
</li>
</ul>
<a name="SVector3d-double-double-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(double&nbsp;x,
                 double&nbsp;y,
                 double&nbsp;z)</pre>
<div class="block">Constructeur avec composante <i>x</i>,<i>y</i> et <i>z</i> du vecteur 3d.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>x</code> - La composante <i>x</i> du vecteur.</dd>
<dd><code>y</code> - La composante <i>y</i> du vecteur.</dd>
<dd><code>z</code> - La composante <i>z</i> du vecteur.</dd>
</dl>
</li>
</ul>
<a name="SVector3d-double-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(double&nbsp;x,
                 double&nbsp;y)</pre>
<div class="block">Constructeur avec composante <i>x</i> et <i>y</i> vecteur 3d. La composante <i>z</i> est assignée à zéro.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>x</code> - La composante <i>x</i> du vecteur.</dd>
<dd><code>y</code> - La composante <i>y</i> du vecteur.</dd>
</dl>
</li>
</ul>
<a name="SVector3d-java.awt.Point-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(java.awt.Point&nbsp;point)</pre>
<div class="block">Permet de construire un vecteur avec une variable de type Point
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>point</code> - le point</dd>
</dl>
</li>
</ul>
<a name="SVector3d-java.awt.geom.Point2D-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(java.awt.geom.Point2D&nbsp;point2D)</pre>
<div class="block">Permet de construire un vecteur avec une variable de type Point2D
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>point2D</code> - le point</dd>
</dl>
</li>
</ul>
<a name="SVector3d-double:A-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(double[]&nbsp;components)</pre>
<div class="block">Permet de construire un vecteur à partir d'un tableau de composantes
 Le tableau peut contenir 2 ou 3 composantes
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>components</code> - Le tableau de composantes</dd>
</dl>
</li>
</ul>
<a name="SVector3d-java.awt.Dimension-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>SVector3d</h4>
<pre>public&nbsp;SVector3d(java.awt.Dimension&nbsp;dimension)</pre>
<div class="block">Permet de créer un vecteur en 2 dimensions à partir d'un objet Dimension</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>dimension</code> - La dimension</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="changeComponentAtIndex-int-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>changeComponentAtIndex</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;changeComponentAtIndex(int&nbsp;index,
                                        double&nbsp;value)</pre>
<div class="block">Permet d'obtenir un nouveau vecteur ayant la composante à l'index 'index' changée pour 'value'
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>index</code> - L'index de la composante à changer</dd>
<dd><code>value</code> - La nouvelle valeur</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur</dd>
</dl>
</li>
</ul>
<a name="getComponents--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getComponents</h4>
<pre>public&nbsp;double[]&nbsp;getComponents()</pre>
<div class="block">Permet d'obtenir les composantes du vecteur sous la forme d'un tableau
 PAR SIMON TRAN</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Un tableau de composantes</dd>
</dl>
</li>
</ul>
<a name="toPoint--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toPoint</h4>
<pre>public&nbsp;java.awt.geom.Point2D&nbsp;toPoint()</pre>
<div class="block">Permet de convertir un SVector3d en point de 2 dimensions. La troisième composante est ignorée
 PAR SIMON TRAN</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>le point</dd>
</dl>
</li>
</ul>
<a name="vectorFromSizeAndAngle-double-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>vectorFromSizeAndAngle</h4>
<pre>public static&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;vectorFromSizeAndAngle(double&nbsp;size,
                                               double&nbsp;angle)</pre>
<div class="block">Permet d'obtenir un vecteur à partir d'une taille et d'un angle en radiant
 PAR SIMON TRA</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>size</code> - La taille du vecteur</dd>
<dd><code>angle</code> - L'angle en radiant</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur</dd>
</dl>
</li>
</ul>
<a name="getX--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getX</h4>
<pre>public&nbsp;double&nbsp;getX()</pre>
<div class="block">Méthode qui donne accès à la coordonnée x du vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La coordonnée x.</dd>
</dl>
</li>
</ul>
<a name="getY--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getY</h4>
<pre>public&nbsp;double&nbsp;getY()</pre>
<div class="block">Méthode qui donne accès à la coordonnée y du vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La coordonnée y.</dd>
</dl>
</li>
</ul>
<a name="getZ--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getZ</h4>
<pre>public&nbsp;double&nbsp;getZ()</pre>
<div class="block">Méthode qui donne accès à la coordonnée z du vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La coordonnée z.</dd>
</dl>
</li>
</ul>
<a name="add-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>add</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;add(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode qui calcule <b>l'addition</b> de deux vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le vecteur à ajouter.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La somme des deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="substract-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>substract</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;substract(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode qui calcul la <b>soustraction</b> de deux vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - - Le vecteur à soustraire au vecteur présent.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La soustraction des deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="multiply-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>multiply</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;multiply(double&nbsp;m)</pre>
<div class="block">Méthode qui effectue la <b>multiplication d'un vecteur par une scalaire</b>.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>m</code> - Le scalaire.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La multiplication d'un vecteur par un scalaire.</dd>
</dl>
</li>
</ul>
<a name="scale-double-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>scale</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;scale(double&nbsp;x,
                       double&nbsp;y)</pre>
<div class="block">Permet de redimensionner un vecteur en 2 dimensions avec 2 scalaires de grandeurs différentes
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>x</code> - Le redimensionnement en x</dd>
<dd><code>y</code> - Le redimensionnement en y</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le nouveau vecteur redimensionné</dd>
</dl>
</li>
</ul>
<a name="scale-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>scale</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;scale(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;vector)</pre>
<div class="block">Permet de redimensionner un vecteur en 2 dimensions avec un autre vecteur en 2 dimensions. Les composantes du premier vecteur seront multipliées à celles du second.
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>vector</code> - le vecteur de redimensionnement</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le nouveau vecteur redimensionné</dd>
</dl>
</li>
</ul>
<a name="inverse--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>inverse</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;inverse()</pre>
<div class="block">Permet d'obtenir un nouveau vecteur avec les composantes inversées.
 Par exemple, le vecteur [1 3 5] deviendrait [1/1 1/3 1/5]
 PAR SIMON TRAN</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur inversé</dd>
</dl>
</li>
</ul>
<a name="isNull--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isNull</h4>
<pre>public&nbsp;boolean&nbsp;isNull()</pre>
<div class="block">Permet de savoir si un vecteur est nul
 PAR SIMON TRAN</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Vrai si le vecteur est nul</dd>
</dl>
</li>
</ul>
<a name="isNormalized--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isNormalized</h4>
<pre>public&nbsp;boolean&nbsp;isNormalized()</pre>
<div class="block">Permet de savoir si un vecteur est normalisée</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Vrai si la norme du vecteur est 1.0</dd>
</dl>
</li>
</ul>
<a name="modulus--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>modulus</h4>
<pre>public&nbsp;double&nbsp;modulus()</pre>
<div class="block">Méthode pour obtenir le <b>module</b> d'un vecteur.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le module du vecteur.</dd>
</dl>
</li>
</ul>
<a name="normalize--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>normalize</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;normalize()</pre>
<div class="block">Méthode pour <b>normaliser</b> un vecteur à trois dimensions. Un vecteur
 normalisé possède la même orientation, mais possède une <b> longeur unitaire
 </b>. Si le <b>module du vecteur est nul</b>, le vecteur normalisé sera le
 <b> vecteur nul </b> (0.0, 0.0, 0.0).</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur normalisé.</dd>
</dl>
</li>
</ul>
<a name="dot-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dot</h4>
<pre>public&nbsp;double&nbsp;dot(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode pour effectuer le <b>produit scalaire</b> entre deux vecteurs.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le vecteur à mettre en produit scalaire.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le produit scalaire entre les deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="cross-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>cross</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;cross(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;v)</pre>
<div class="block">Méthode pour effectuer le <b>produit vectoriel</b> avec un autre vecteur v.
 Cette version du produit vectoriel est implémenté en respectant la <b> règle
 de la main droite </b>. Il est important de rappeler que le produit vectoriel
 est <b> anticommutatif </b> (AxB = -BxA) et que l'ordre des vecteurs doit
 être adéquat pour obtenir le résultat désiré. Si l'un des deux vecteurs est
 <b> nul </b> ou les deux vecteurs sont <b> parallèles </b>, le résultat sera
 un <b> vecteur nul </b>.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>v</code> - Le second vecteur dans le produit vectoriel.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le résultat du produit vectoriel.</dd>
</dl>
</li>
</ul>
<a name="projection-math.SVector3d-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>projection</h4>
<pre>public static&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;projection(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;A,
                                   <a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;B)</pre>
<div class="block">Permet d'obtenir un vecteur représentant la projection du vecteur A sur le vecteur B
 PAR SIMON TRAN</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - Le vecteur A</dd>
<dd><code>B</code> - Le vecteur B</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le vecteur de la projection A sur B</dd>
</dl>
</li>
</ul>
<a name="distance-math.SVector3d-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>distance</h4>
<pre>public static&nbsp;double&nbsp;distance(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;A,
                              <a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;B)</pre>
<div class="block">Méthode pour obtenir la distance entre deux points.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - Le premier point.</dd>
<dd><code>B</code> - Le deuxième point.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La distance entre le point A et B.</dd>
</dl>
</li>
</ul>
<a name="angleBetween-math.SVector3d-math.SVector3d-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>angleBetween</h4>
<pre>public static&nbsp;double&nbsp;angleBetween(<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;A,
                                  <a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;B)</pre>
<div class="block">Méthode permettant d'obtenir l'angle entre deux vecteurs A et B. L'angle sera
 obtenu en radian.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>A</code> - Le premier vecteur.</dd>
<dd><code>B</code> - Le second vecteur.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>L'angle entre les deux vecteurs.</dd>
</dl>
</li>
</ul>
<a name="angle--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>angle</h4>
<pre>public&nbsp;double&nbsp;angle()</pre>
<div class="block">Méthode pour obtenir l'angle d'un vecteur par rapport à un vecteur horizontale dirigé vers la droite</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>L'angle du vecteur en radiants</dd>
</dl>
</li>
</ul>
<a name="rotate-double-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>rotate</h4>
<pre>public&nbsp;<a href="../math/SVector3d.html" title="class in math">SVector3d</a>&nbsp;rotate(double&nbsp;angle)</pre>
<div class="block">Retourne un vecteur ayant subit une rotation de 'angle' radians</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>angle</code> - L'angle en radians</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Le nouveau vecteur</dd>
</dl>
</li>
</ul>
<a name="toString--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;java.lang.String&nbsp;toString()</pre>
<div class="block">Permet d'obtenir la valeur textuelle du vecteur</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>toString</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>La valeur textuelle du vecteur</dd>
</dl>
</li>
</ul>
<a name="equals-java.lang.Object-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>equals</h4>
<pre>public&nbsp;boolean&nbsp;equals(java.lang.Object&nbsp;obj)</pre>
<div class="block">Permet de comparer 2 vecteurs</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code>equals</code>&nbsp;in class&nbsp;<code>java.lang.Object</code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>obj</code> - L'autre vecteur</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>Vrai si les vecteurs sont égaux</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="../math/MathUtil.html" title="class in math"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li>Next&nbsp;Class</li>
</ul>
<ul class="navList">
<li><a href="../index.html?math/SVector3d.html" target="_top">Frames</a></li>
<li><a href="SVector3d.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
